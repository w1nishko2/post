<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>{{ $bot->bot_name }} - Mini App</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Telegram WebApp JS -->
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    
    <style>
        body {
            background: var(--tg-theme-bg-color, #ffffff);
            color: var(--tg-theme-text-color, #000000);
            font-family: var(--tg-theme-font-family, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif);
            margin: 0;
            padding: 0;
            overflow-x: hidden;
        }

        .container {
            max-width: 100%;
            padding: 16px;
        }

        .welcome-card {
            background: var(--tg-theme-secondary-bg-color, #f8f9fa);
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 24px;
            text-align: center;
            border: 1px solid var(--tg-theme-hint-color, #e9ecef);
        }

        .bot-info {
            background: var(--tg-theme-secondary-bg-color, #f8f9fa);
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 16px;
        }

        .btn-primary {
            background-color: var(--tg-theme-button-color, #007bff);
            border-color: var(--tg-theme-button-color, #007bff);
            color: var(--tg-theme-button-text-color, #ffffff);
        }

        .user-info {
            background: var(--tg-theme-secondary-bg-color, #f8f9fa);
            border-radius: 8px;
            padding: 16px;
            margin: 16px 0;
        }

        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 16px;
            margin: 24px 0;
        }

        .feature-card {
            background: var(--tg-theme-secondary-bg-color, #f8f9fa);
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s ease;
            border: 1px solid var(--tg-theme-hint-color, #e9ecef);
        }

        .feature-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .feature-icon {
            font-size: 32px;
            margin-bottom: 12px;
        }

        #loading {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    </style>
</head>
<body>
    <div id="loading" class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
        </div>
        <p class="mt-2">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mini App...</p>
    </div>

    <div id="app" class="container" style="display: none;">
        <div class="welcome-card">
            <h1 class="h3 mb-3">üöÄ {{ $bot->bot_name }}</h1>
            <p class="text-muted mb-0">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ Mini App!</p>
        </div>

        <div id="user-info" class="user-info" style="display: none;">
            <h5>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h5>
            <div id="user-details"></div>
        </div>

        <div class="bot-info">
            <h5>ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</h5>
            <p><strong>–ò–º—è –±–æ—Ç–∞:</strong> {{ $bot->bot_name }}</p>
            <p><strong>Username:</strong> @{{ $bot->bot_username }}</p>
            <p><strong>Mini App:</strong> {{ $shortName }}</p>
        </div>

        <div class="feature-grid">
            <div class="feature-card" onclick="showAlert('–ü—Ä–æ—Ñ–∏–ª—å')">
                <div class="feature-icon">üë§</div>
                <h6>–ü—Ä–æ—Ñ–∏–ª—å</h6>
                <small class="text-muted">–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</small>
            </div>

            <div class="feature-card" onclick="showAlert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')">
                <div class="feature-icon">‚öôÔ∏è</div>
                <h6>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h6>
                <small class="text-muted">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</small>
            </div>

            <div class="feature-card" onclick="showAlert('–ü–æ–º–æ—â—å')">
                <div class="feature-icon">‚ùì</div>
                <h6>–ü–æ–º–æ—â—å</h6>
                <small class="text-muted">FAQ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</small>
            </div>

            <div class="feature-card" onclick="sendData()">
                <div class="feature-icon">üíæ</div>
                <h6>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</h6>
                <small class="text-muted">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</small>
            </div>
        </div>

        <div class="text-center mt-4">
            <button class="btn btn-primary" onclick="closeApp()">
                –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            </button>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        let tg = window.Telegram.WebApp;
        let userData = null;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mini App
        function initApp() {
            try {
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram WebApp
                tg.ready();
                tg.expand();

                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
                document.body.style.backgroundColor = tg.themeParams.bg_color || '#ffffff';
                document.body.style.color = tg.themeParams.text_color || '#000000';

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (tg.BackButton) {
                    tg.BackButton.show();
                    tg.BackButton.onClick(() => {
                        tg.close();
                    });
                }

                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
                    userData = tg.initDataUnsafe.user;
                    displayUserInfo(userData);
                }

                // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                document.getElementById('loading').style.display = 'none';
                document.getElementById('app').style.display = 'block';

                console.log('Mini App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                console.log('Telegram WebApp –¥–∞–Ω–Ω—ã–µ:', tg.initDataUnsafe);

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
                document.getElementById('loading').innerHTML = `
                    <div class="alert alert-danger">
                        <h5>–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h5>
                        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram WebApp</p>
                        <small>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ Telegram</small>
                    </div>
                `;
            }
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        function displayUserInfo(user) {
            const userInfoEl = document.getElementById('user-info');
            const userDetailsEl = document.getElementById('user-details');
            
            if (user) {
                userDetailsEl.innerHTML = `
                    <p><strong>–ò–º—è:</strong> ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                    ${user.last_name ? `<p><strong>–§–∞–º–∏–ª–∏—è:</strong> ${user.last_name}</p>` : ''}
                    ${user.username ? `<p><strong>Username:</strong> @${user.username}</p>` : ''}
                    <p><strong>ID:</strong> ${user.id}</p>
                    <p><strong>–Ø–∑—ã–∫:</strong> ${user.language_code || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}</p>
                `;
                userInfoEl.style.display = 'block';
            }
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        function showAlert(message) {
            if (tg.showAlert) {
                tg.showAlert(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${message}`);
            } else {
                alert(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${message}`);
            }
        }

        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É
        function sendData() {
            const data = {
                action: 'save_data',
                user_data: userData,
                timestamp: Date.now(),
                bot_short_name: '{{ $shortName }}'
            };

            if (tg.sendData) {
                tg.sendData(JSON.stringify(data));
                showAlert('–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –±–æ—Ç—É!');
            } else {
                console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', data);
                showAlert('–î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ');
            }
        }

        // –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        function closeApp() {
            if (tg.close) {
                tg.close();
            } else {
                showAlert('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ');
            }
        }

        // Haptic Feedback –¥–ª—è –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.feature-card, .btn').forEach(el => {
            el.addEventListener('click', () => {
                if (tg.HapticFeedback) {
                    tg.HapticFeedback.impactOccurred('light');
                }
            });
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        document.addEventListener('DOMContentLoaded', initApp);

        // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ Telegram
        if (!window.Telegram) {
            console.warn('Telegram WebApp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏.');
            setTimeout(() => {
                document.getElementById('loading').style.display = 'none';
                document.getElementById('app').style.display = 'block';
            }, 1000);
        }
    </script>
</body>
</html>