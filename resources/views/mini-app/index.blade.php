<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>{{ $bot->bot_name }} - Mini App</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Telegram WebApp JS -->
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    
    <style>
        body {
            background: var(--tg-theme-bg-color, #ffffff);
            color: var(--tg-theme-text-color, #000000);
            font-family: var(--tg-theme-font-family, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif);
            margin: 0;
            padding: 0;
            overflow-x: hidden;
        }

        .container {
            max-width: 100%;
            padding: 16px;
        }

        .welcome-card {
            background: var(--tg-theme-secondary-bg-color, #f8f9fa);
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 24px;
            text-align: center;
            border: 1px solid var(--tg-theme-hint-color, #e9ecef);
        }

        .bot-info {
            background: var(--tg-theme-secondary-bg-color, #f8f9fa);
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 16px;
        }

        .btn-primary {
            background-color: var(--tg-theme-button-color, #007bff);
            border-color: var(--tg-theme-button-color, #007bff);
            color: var(--tg-theme-button-text-color, #ffffff);
        }

        .user-info {
            background: var(--tg-theme-secondary-bg-color, #f8f9fa);
            border-radius: 8px;
            padding: 16px;
            margin: 16px 0;
        }

        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 16px;
            margin: 24px 0;
        }

        .feature-card {
            background: var(--tg-theme-secondary-bg-color, #f8f9fa);
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s ease;
            border: 1px solid var(--tg-theme-hint-color, #e9ecef);
        }

        .feature-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .feature-icon {
            font-size: 32px;
            margin-bottom: 12px;
        }

        #loading {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .shop-section {
            background: white;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .goods-item {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            border-left: 4px solid #007bff;
        }

        .goods-item h6 {
            color: #007bff;
            margin-bottom: 5px;
        }

        .brand-badge {
            background: #e3f2fd;
            color: #1976d2;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            cursor: pointer;
        }

        .brand-badge:hover {
            background: #1976d2;
            color: white;
        }

        .cart-sidebar {
            position: fixed;
            top: 0;
            right: -100%;
            width: 90%;
            max-width: 400px;
            height: 100vh;
            background: white;
            box-shadow: -2px 0 10px rgba(0,0,0,0.3);
            transition: right 0.3s ease;
            z-index: 1000;
            display: flex;
            flex-direction: column;
        }

        .cart-sidebar.open {
            right: 0;
        }

        .cart-header {
            padding: 20px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: between;
            align-items: center;
        }

        .cart-body {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }

        .cart-footer {
            padding: 20px;
            border-top: 1px solid #eee;
        }

        .btn-close-cart {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            margin-left: auto;
        }

        .cart-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 999;
            display: none;
        }

        .cart-overlay.show {
            display: block;
        }

        .cart-item {
            background: #f8f9fa;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 6px;
        }

        .price-highlight {
            color: #28a745;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div id="loading" class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
        </div>
        <p class="mt-2">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mini App...</p>
    </div>

    <div id="app" class="container" style="display: none;">
        <div class="welcome-card">
            <h1 class="h3 mb-3">üöÄ {{ $bot->bot_name }}</h1>
            <p class="text-muted mb-0">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ Mini App!</p>
        </div>

        @if($bot->hasForumAutoApi())
        <!-- –ú–∞–≥–∞–∑–∏–Ω Forum-Auto -->
        <div class="shop-section">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5>üõí –ú–∞–≥–∞–∑–∏–Ω –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π</h5>
                <button class="btn btn-sm btn-outline-primary" onclick="toggleCart()">
                    <i class="fas fa-shopping-cart"></i>
                    <span id="cart-count" class="badge bg-danger">0</span>
                </button>
            </div>

            <!-- –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ -->
            <div class="search-section mb-3">
                <div class="input-group">
                    <input type="text" id="search-input" class="form-control" placeholder="–ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞..." onkeypress="if(event.key==='Enter') searchGoods()">
                    <button class="btn btn-primary" onclick="searchGoods()">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
                <div class="d-flex justify-content-center mt-2 gap-2">
                    <button class="btn btn-outline-secondary btn-sm" onclick="loadRandomGoods()">
                        <i class="fas fa-random"></i> –°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                    </button>
                    <button class="btn btn-outline-info btn-sm" onclick="loadInitialGoods()">
                        <i class="fas fa-star"></i> –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                    </button>
                </div>
            </div>

            <!-- –ë—Ä–µ–Ω–¥—ã -->
            <div class="brands-section mb-3" style="display: none;">
                <h6>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±—Ä–µ–Ω–¥—ã:</h6>
                <div id="brands-list" class="d-flex flex-wrap gap-2"></div>
            </div>

            <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ -->
            <div id="goods-results" class="goods-section">
                <div class="text-center text-muted py-4">
                    <i class="fas fa-search fa-2x mb-2"></i>
                    <p>–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤</p>
                </div>
            </div>

            <!-- –ö–æ—Ä–∑–∏–Ω–∞ -->
            <div id="cart-sidebar" class="cart-sidebar">
                <div class="cart-header">
                    <h6>–ö–æ—Ä–∑–∏–Ω–∞</h6>
                    <button class="btn-close-cart" onclick="toggleCart()">√ó</button>
                </div>
                <div id="cart-items" class="cart-body"></div>
                <div class="cart-footer">
                    <button class="btn btn-success w-100" onclick="submitOrder()">
                        –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                    </button>
                </div>
            </div>

            <!-- –û–≤–µ—Ä–ª–µ–π –∫–æ—Ä–∑–∏–Ω—ã -->
            <div id="cart-overlay" class="cart-overlay" onclick="toggleCart()"></div>
        </div>
        @else
        <div class="alert alert-info">
            <i class="fas fa-info-circle"></i>
            <strong>–ú–∞–≥–∞–∑–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</strong><br>
            –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Forum-Auto API.
        </div>
        @endif

       

    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        let tg = window.Telegram.WebApp;
        let userData = null;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mini App
        function initApp() {
            try {
                console.log('–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Mini App...');
                console.log('window.Telegram:', window.Telegram);
                console.log('window.Telegram.WebApp:', window.Telegram?.WebApp);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp
                const isTelegramWebApp = window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initData;
                const isDevelopmentMode = !isTelegramWebApp && (window.location.hostname === 'localhost' || window.location.hostname.includes('127.0.0.1') || window.location.hostname.includes('ospanel'));
                
                console.log('isTelegramWebApp:', isTelegramWebApp);
                console.log('isDevelopmentMode:', isDevelopmentMode);
                
                if (isTelegramWebApp) {
                    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp...');
                    
                    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram WebApp
                    tg.ready();
                    tg.expand();

                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
                    if (tg.themeParams) {
                        document.body.style.backgroundColor = tg.themeParams.bg_color || '#ffffff';
                        document.body.style.color = tg.themeParams.text_color || '#000000';
                        console.log('–¢–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞:', tg.themeParams);
                    }

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if (tg.BackButton) {
                        tg.BackButton.show();
                        tg.BackButton.onClick(() => {
                            console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥');
                            tg.close();
                        });
                    }

                    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    console.log('initDataUnsafe:', tg.initDataUnsafe);
                    console.log('initData:', tg.initData);
                    
                    if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
                        userData = tg.initDataUnsafe.user;
                        console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initDataUnsafe:', userData);
                        displayUserInfo(userData);
                    } else if (tg.initData) {
                        // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData
                        console.log('–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData...');
                        userData = parseUserFromInitData(tg.initData);
                        if (userData) {
                            console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ initData:', userData);
                            displayUserInfo(userData);
                        }
                    }

                    console.log('Mini App —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ Telegram');
                    
                } else if (isDevelopmentMode) {
                    // –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    userData = {
                        id: 12345,
                        first_name: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
                        last_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
                        username: 'developer'
                    };
                    displayUserInfo(userData);
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—É—é —Ç–µ–º—É
                    document.body.style.backgroundColor = '#ffffff';
                    document.body.style.color = '#000000';
                    
                    console.log('Mini App –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                    const devWarning = document.createElement('div');
                    devWarning.className = 'alert alert-warning text-center';
                    devWarning.innerHTML = `
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</strong><br>
                        –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω–µ Telegram WebApp
                    `;
                    document.querySelector('.container').insertBefore(devWarning, document.querySelector('.container').firstChild);
                    
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω-—Å—Ä–µ–¥—ã
                    throw new Error('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                }

                // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                const loadingEl = document.getElementById('loading');
                const appEl = document.getElementById('app');
                
                if (loadingEl) loadingEl.style.display = 'none';
                if (appEl) appEl.style.display = 'block';

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                loadInitialGoods();

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
                showErrorMessage(error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
        function showErrorMessage(message) {
            const loadingEl = document.getElementById('loading');
            if (loadingEl) {
                loadingEl.innerHTML = `
                    <div class="alert alert-danger">
                        <h5>–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h5>
                        <p>${message}</p>
                        <small>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ Telegram</small>
                        <div class="mt-3">
                            <button class="btn btn-outline-primary" onclick="location.reload()">
                                <i class="fas fa-redo"></i> –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                            </button>
                            <button class="btn btn-outline-secondary" onclick="showDebugInfo()">
                                <i class="fas fa-bug"></i> –û—Ç–ª–∞–¥–∫–∞
                            </button>
                        </div>
                    </div>
                `;
            } else {
                console.error('–≠–ª–µ–º–µ–Ω—Ç loading –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—à–∏–±–∫–∞:', message);
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        function showDebugInfo() {
            const loadingEl = document.getElementById('loading');
            if (loadingEl) {
                const debugInfo = `
                    <div class="alert alert-info mt-3">
                        <h6>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h6>
                        <small>
                            <strong>URL:</strong> ${window.location.href}<br>
                            <strong>User Agent:</strong> ${navigator.userAgent}<br>
                            <strong>Telegram:</strong> ${window.Telegram ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}<br>
                            <strong>WebApp:</strong> ${window.Telegram?.WebApp ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}<br>
                            <strong>initData:</strong> ${window.Telegram?.WebApp?.initData || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}<br>
                            <strong>Platform:</strong> ${window.Telegram?.WebApp?.platform || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                        </small>
                    </div>
                `;
                loadingEl.innerHTML += debugInfo;
            }
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∑–∞–≥–ª—É—à–∫–∞ - —ç–ª–µ–º–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ HTML)
        function displayUserInfo(user) {
            if (user) {
                console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', {
                    id: user.id,
                    first_name: user.first_name,
                    last_name: user.last_name,
                    username: user.username,
                    language_code: user.language_code
                });
            } else {
                console.warn('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã');
            }
        }

        // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData
        function parseUserFromInitData(initData) {
            try {
                const urlParams = new URLSearchParams(initData);
                const userParam = urlParams.get('user');
                if (userParam) {
                    const user = JSON.parse(decodeURIComponent(userParam));
                    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ initData:', user);
                    return user;
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            }
            return null;
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        function showAlert(message) {
            if (tg.showAlert) {
                tg.showAlert(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${message}`);
            } else {
                alert(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${message}`);
            }
        }

        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É
        function sendData() {
            const data = {
                action: 'save_data',
                user_data: userData,
                timestamp: Date.now(),
                bot_short_name: '{{ $shortName }}'
            };

            if (tg.sendData) {
                tg.sendData(JSON.stringify(data));
                showAlert('–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –±–æ—Ç—É!');
            } else {
                console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', data);
                showAlert('–î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ');
            }
        }

        // –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        function closeApp() {
            if (tg.close) {
                tg.close();
            } else {
                showAlert('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ');
            }
        }

        // Haptic Feedback –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM)
        function setupHapticFeedback() {
            const elements = document.querySelectorAll('.feature-card, .btn');
            console.log('–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Haptic Feedback –¥–ª—è', elements.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
            
            elements.forEach(el => {
                el.addEventListener('click', () => {
                    if (tg && tg.HapticFeedback) {
                        try {
                            tg.HapticFeedback.impactOccurred('light');
                        } catch (error) {
                            console.warn('–û—à–∏–±–∫–∞ Haptic Feedback:', error);
                        }
                    }
                });
            });
        }

        // ===== FORUM-AUTO –ú–ê–ì–ê–ó–ò–ù =====
        
        let cart = [];
        const apiBase = '/api/forum-auto/{{ $shortName }}';

        // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (—Å–ª—É—á–∞–π–Ω—ã–µ –∏–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ)
        async function loadInitialGoods() {
            const resultsContainer = document.getElementById('goods-results');
            resultsContainer.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã...</div>';

            try {
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å API
                let response = await fetch(`${apiBase}/test-credentials`);
                let testResult = await response.json();
                
                console.log('API credentials test:', testResult);
                
                if (!testResult.success) {
                    resultsContainer.innerHTML = `
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i>
                            <strong>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞!</strong><br>
                            ${testResult.error || 'API Forum-Auto –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã'}
                            <div class="mt-2">
                                <small class="text-muted">–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</small>
                            </div>
                        </div>
                        <div class="mt-3">

                            <button class="btn btn-outline-secondary" onclick="searchSampleGoods()">
                                <i class="fas fa-search"></i> –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫
                            </button>
                        </div>
                    `;
                    return;
                }

                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                response = await fetch(`${apiBase}/goods/random?limit=12`);
                let data = await response.json();

                console.log('Random goods response:', data);

                if (data.success && data.data && data.data.length > 0) {
                    displayGoods(data.data);
                    return;
                }

                // –ï—Å–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, –ø—Ä–æ–±—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
                response = await fetch(`${apiBase}/goods/popular`);
                data = await response.json();

                console.log('Popular goods response:', data);

                if (data.success && data.data && data.data.length > 0) {
                    displayGoods(data.data);
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                    resultsContainer.innerHTML = `
                        <div class="alert alert-info text-center">
                            <i class="fas fa-info-circle"></i>
                            <strong>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</strong><br>
                            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞.
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Initial goods loading error:', error);
                resultsContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</strong><br>
                        –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä–æ–≤.
                        <div class="mt-2">
                            <button class="btn btn-sm btn-outline-primary" onclick="loadInitialGoods()">
                                <i class="fas fa-redo"></i> –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
                            </button>
                        </div>
                    </div>
                `;
            }
        }

        // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        async function loadRandomGoods() {
            const resultsContainer = document.getElementById('goods-results');
            resultsContainer.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã...</div>';

            try {
                const response = await fetch(`${apiBase}/goods/random?limit=15`);
                const data = await response.json();

                console.log('Random goods response:', data);

                if (data.success && data.data && data.data.length > 0) {
                    displayGoods(data.data);
                } else {
                    // –ï—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    resultsContainer.innerHTML = `
                        <div class="alert alert-info text-center">
                            <i class="fas fa-info-circle"></i>
                            <strong>–ù–µ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</strong><br>
                            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫.
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Random goods loading error:', error);
                await loadInitialGoods();
            }
        }

        // –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–∏–º–µ—Ä–∞–º –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        async function searchSampleGoods() {
            const sampleArticles = ['OC47', 'W712', 'LF787', 'OX123D', 'HU7008z'];
            const randomArticle = sampleArticles[Math.floor(Math.random() * sampleArticles.length)];
            
            const searchInput = document.getElementById('search-input');
            searchInput.value = randomArticle;
            
            await searchGoods();
        }



        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        async function searchGoods() {
            const searchInput = document.getElementById('search-input');
            const searchTerm = searchInput.value.trim();
            
            if (!searchTerm || searchTerm.length < 2) {
                showAlert('–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)');
                return;
            }

            const resultsContainer = document.getElementById('goods-results');
            resultsContainer.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤...</div>';

            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ 70% —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                const response = await fetch(`${apiBase}/goods/advanced-search?search=${encodeURIComponent(searchTerm)}&min_match=70&limit=20`);
                const data = await response.json();

                console.log('Advanced search response:', data);

                if (data.success && data.data && data.data.length > 0) {
                    displayGoods(data.data);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                    const totalFound = data.filter ? data.filter.total_found : data.data.length;
                    if (totalFound > 0) {
                        const infoElement = document.createElement('div');
                        infoElement.className = 'alert alert-info mt-2';
                        infoElement.innerHTML = `
                            <i class="fas fa-info-circle"></i>
                            –ù–∞–π–¥–µ–Ω–æ ${totalFound} —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º 70% –∏ –≤—ã—à–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${searchTerm}"
                        `;
                        resultsContainer.insertBefore(infoElement, resultsContainer.firstChild);
                    }
                } else {
                    // –ï—Å–ª–∏ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É –ø–æ–∏—Å–∫—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫
                    await fallbackSearch(searchTerm, resultsContainer);
                }
            } catch (error) {
                console.error('Advanced search error:', error);
                // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫
                await fallbackSearch(searchTerm, resultsContainer);
            }
        }

        // –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫, –µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        async function fallbackSearch(searchTerm, resultsContainer) {
            try {
                resultsContainer.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É...</div>';
                
                const response = await fetch(`${apiBase}/goods/search?search=${encodeURIComponent(searchTerm)}`);
                const data = await response.json();

                console.log('Fallback search response:', data);

                if (data.success && data.data && data.data.length > 0) {
                    displayGoods(data.data);
                } else {
                    // –ï—Å–ª–∏ –∏ –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–∫–∞–∂–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
                    await searchBrands(searchTerm, resultsContainer);
                }
            } catch (error) {
                console.error('Fallback search error:', error);
                resultsContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle"></i>
                        –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.
                    </div>
                    <div class="text-center mt-3">
                        <button class="btn btn-primary" onclick="loadRandomGoods()">
                            <i class="fas fa-random"></i> –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                        </button>
                    </div>
                `;
            }
        }

        // –ü–æ–∏—Å–∫ –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        async function searchBrands(searchTerm, resultsContainer) {
            try {
                const response = await fetch(`${apiBase}/brands?art=${encodeURIComponent(searchTerm)}`);
                const data = await response.json();

                console.log('Brands response:', data);

                if (data.success && data.data && data.data.length > 0) {
                    let html = `
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i>
                            –ù–∞–π–¥–µ–Ω—ã –±—Ä–µ–Ω–¥—ã –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ "${searchTerm}". –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:
                        </div>
                        <div class="row">
                    `;
                    
                    data.data.forEach(brand => {
                        html += `
                            <div class="col-6 col-md-4 mb-2">
                                <button class="btn btn-outline-primary btn-sm w-100" onclick="searchByBrand('${searchTerm}', '${brand.brand}')">
                                    ${brand.brand}
                                </button>
                            </div>
                        `;
                    });
                    
                    html += `
                        </div>
                        <div class="text-center mt-3">
                            <button class="btn btn-secondary btn-sm me-2" onclick="loadRandomGoods()">
                                <i class="fas fa-random"></i> –°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                            </button>
                            <button class="btn btn-info btn-sm" onclick="loadInitialGoods()">
                                <i class="fas fa-star"></i> –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                            </button>
                        </div>
                    `;
                    
                    resultsContainer.innerHTML = html;
                } else {
                    resultsContainer.innerHTML = `
                        <div class="text-center text-muted py-4">
                            <i class="fas fa-search fa-2x mb-2"></i>
                            <p>–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
                            <small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –Ω–∏–∂–µ</small>
                            <div class="mt-3">
                                <button class="btn btn-primary btn-sm me-2" onclick="loadRandomGoods()">
                                    <i class="fas fa-random"></i> –°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                                </button>
                                <button class="btn btn-info btn-sm" onclick="loadInitialGoods()">
                                    <i class="fas fa-star"></i> –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                                </button>
                            </div>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Brands search error:', error);
                resultsContainer.innerHTML = `
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-search fa-2x mb-2"></i>
                        <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ "${searchTerm}"</p>
                        <small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã</small>
                        <div class="mt-3">
                            <button class="btn btn-primary btn-sm me-2" onclick="loadRandomGoods()">
                                <i class="fas fa-random"></i> –°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                            </button>
                            <button class="btn btn-info btn-sm" onclick="loadInitialGoods()">
                                <i class="fas fa-star"></i> –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                            </button>
                        </div>
                    </div>
                `;
            }
        }

        // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –±—Ä–µ–Ω–¥—É
        async function searchByBrand(article, brand) {
            const resultsContainer = document.getElementById('goods-results');
            resultsContainer.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞...</div>';

            try {
                const response = await fetch(`${apiBase}/goods?art=${encodeURIComponent(article)}&br=${encodeURIComponent(brand)}`);
                const data = await response.json();

                console.log('Brand goods response:', data);

                if (data.success && data.data && data.data.length > 0) {
                    displayGoods(data.data);
                } else {
                    resultsContainer.innerHTML = `
                        <div class="text-center text-muted py-4">
                            <i class="fas fa-search fa-2x mb-2"></i>
                            <p>–¢–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞ "${brand}" –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ "${article}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Brand search error:', error);
                resultsContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle"></i>
                        –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –±—Ä–µ–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
                    </div>
                `;
            }
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        function displayGoods(goods) {
            const resultsContainer = document.getElementById('goods-results');
            
            if (!goods || goods.length === 0) {
                resultsContainer.innerHTML = `
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-search fa-2x mb-2"></i>
                        <p>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                        <small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</small>
                        <div class="mt-3">
                            <button class="btn btn-primary btn-sm" onclick="loadRandomGoods()">
                                <i class="fas fa-random"></i> –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                            </button>
                        </div>
                    </div>
                `;
                return;
            }
            
            let html = '';
            goods.forEach(item => {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç badge –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                let matchBadge = '';
                if (typeof item.match_percent !== 'undefined') {
                    let badgeClass = 'bg-secondary';
                    if (item.match_percent >= 95) badgeClass = 'bg-success';
                    else if (item.match_percent >= 85) badgeClass = 'bg-info';
                    else if (item.match_percent >= 75) badgeClass = 'bg-warning';
                    
                    matchBadge = `<span class="badge ${badgeClass} ms-2">–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${item.match_percent}%</span>`;
                }

                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                let matchingFieldInfo = '';
                if (item.matching_field) {
                    const fieldNames = {
                        'art': '–∞—Ä—Ç–∏–∫—É–ª',
                        'name': '–Ω–∞–∑–≤–∞–Ω–∏–µ', 
                        'brand': '–±—Ä–µ–Ω–¥',
                        'gid': '–∫–æ–¥'
                    };
                    const fieldName = fieldNames[item.matching_field] || item.matching_field;
                    matchingFieldInfo = `<small class="text-info ms-1">(–Ω–∞–π–¥–µ–Ω–æ –≤: ${fieldName})</small>`;
                }

                html += `
                    <div class="goods-item">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <h6 class="mb-1">${item.name || '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</h6>
                                <div class="mb-2">
                                    <span class="brand-badge">${item.brand || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥'}</span>
                                    <small class="text-muted ms-2">–ê—Ä—Ç: ${item.art || 'N/A'}</small>
                                    ${matchBadge}
                                    ${matchingFieldInfo}
                                </div>
                                <div class="d-flex align-items-center justify-content-between">
                                    <div>
                                        <span class="price-highlight">${item.price ? parseFloat(item.price).toFixed(2) : '0.00'} ‚ÇΩ</span>
                                        ${(item.num && item.num > 0) ? 
                                            `<small class="text-success ms-2">–í –Ω–∞–ª–∏—á–∏–∏: ${item.num} —à—Ç.</small>` : 
                                            '<small class="text-danger ms-2">–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</small>'
                                        }
                                        ${item.kr && item.kr > 1 ? `<small class="text-muted ms-2">–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å: ${item.kr}</small>` : ''}
                                    </div>
                                    ${(item.num && item.num > 0) ? `
                                        <button class="btn btn-sm btn-primary" onclick="addToCart('${item.gid}', '${(item.name || '').replace(/'/g, '\\\'') }', ${item.price || 0}, '${(item.brand || '').replace(/'/g, '\\\'')}', '${(item.art || '').replace(/'/g, '\\\'')}')">
                                            <i class="fas fa-cart-plus"></i>
                                        </button>
                                    ` : ''}
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });

            resultsContainer.innerHTML = html;
        }

        // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        function addToCart(goodsCode, name, price, brand, art) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            const existingItem = cart.find(item => item.goodsCode === goodsCode);
            
            if (existingItem) {
                existingItem.quantity++;
            } else {
                cart.push({
                    goodsCode,
                    name,
                    price: parseFloat(price),
                    brand,
                    art,
                    quantity: 1
                });
            }
            
            updateCartUI();
            showAlert(`${name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`);
            
            // Haptic feedback
            if (tg.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('medium');
            }
        }

        // –û–±–Ω–æ–≤–∏—Ç—å UI –∫–æ—Ä–∑–∏–Ω—ã
        function updateCartUI() {
            const cartCount = document.getElementById('cart-count');
            const cartItems = document.getElementById('cart-items');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            cartCount.textContent = totalItems;
            cartCount.style.display = totalItems > 0 ? 'inline' : 'none';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
            if (cart.length === 0) {
                cartItems.innerHTML = '<div class="text-center text-muted py-4">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</div>';
                return;
            }
            
            let html = '';
            let total = 0;
            
            cart.forEach((item, index) => {
                const itemTotal = item.price * item.quantity;
                total += itemTotal;
                
                html += `
                    <div class="cart-item">
                        <h6 class="mb-1">${item.name}</h6>
                        <div class="mb-2">
                            <small class="text-muted">${item.brand} ‚Ä¢ ${item.art}</small>
                        </div>
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-secondary" onclick="changeQuantity(${index}, -1)">‚àí</button>
                                <button class="btn btn-outline-secondary">${item.quantity}</button>
                                <button class="btn btn-outline-secondary" onclick="changeQuantity(${index}, 1)">+</button>
                            </div>
                            <div>
                                <span class="price-highlight">${itemTotal.toFixed(2)} ‚ÇΩ</span>
                                <button class="btn btn-sm btn-outline-danger ms-2" onclick="removeFromCart(${index})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            html += `
                <div class="mt-3 pt-3 border-top">
                    <h5>–ò—Ç–æ–≥–æ: <span class="price-highlight">${total.toFixed(2)} ‚ÇΩ</span></h5>
                </div>
            `;
            
            cartItems.innerHTML = html;
        }

        // –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        function changeQuantity(index, delta) {
            if (cart[index]) {
                cart[index].quantity += delta;
                if (cart[index].quantity <= 0) {
                    cart.splice(index, 1);
                }
                updateCartUI();
            }
        }

        // –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        function removeFromCart(index) {
            cart.splice(index, 1);
            updateCartUI();
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        function toggleCart() {
            const sidebar = document.getElementById('cart-sidebar');
            const overlay = document.getElementById('cart-overlay');
            
            sidebar.classList.toggle('open');
            overlay.classList.toggle('show');
        }

        // –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
        async function submitOrder() {
            if (cart.length === 0) {
                showAlert('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
                return;
            }

            try {
                for (const item of cart) {
                    const response = await fetch(`${apiBase}/cart/add`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            goods_code: item.goodsCode,
                            quantity: item.quantity,
                            comment: `–ó–∞–∫–∞–∑ –∏–∑ Mini App`
                        })
                    });

                    const data = await response.json();
                    if (!data.success) {
                        throw new Error(data.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
                    }
                }

                cart = [];
                updateCartUI();
                toggleCart();
                showAlert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!');

            } catch (error) {
                console.error('Order error:', error);
                showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ' + error.message);
            }
        }

        // –ü–æ–∏—Å–∫ –ø–æ Enter
        document.getElementById('search-input')?.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchGoods();
            }
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
            
            // –û–∂–∏–¥–∞–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Telegram WebApp
            setTimeout(() => {
                initApp();
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Haptic Feedback –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                setTimeout(setupHapticFeedback, 500);
            }, 100);
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        if (document.readyState === 'loading') {
            console.log('DOM –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
        } else {
            console.log('DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ...');
            setTimeout(() => {
                initApp();
                setTimeout(setupHapticFeedback, 500);
            }, 100);
        }

        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        window.addEventListener('error', (event) => {
            console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error, event.filename, event.lineno);
        });

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('Mini App script –∑–∞–≥—Ä—É–∂–µ–Ω');
        console.log('Telegram –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.Telegram);
        console.log('Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.Telegram?.WebApp);
    </script>
</body>
</html>