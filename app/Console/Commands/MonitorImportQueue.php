<?php

namespace App\Console\Commands;

use App\Models\ImportQueue;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–µ—Ä–µ–¥–∏ –∏–º–ø–æ—Ä—Ç–∞
 */
class MonitorImportQueue extends Command
{
    protected $signature = 'import:monitor-queue {session_id? : UUID —Å–µ—Å—Å–∏–∏ –∏–º–ø–æ—Ä—Ç–∞}';
    protected $description = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏ –∏–º–ø–æ—Ä—Ç–∞';

    public function handle()
    {
        $sessionId = $this->argument('session_id');

        if ($sessionId) {
            $this->monitorSpecificSession($sessionId);
        } else {
            $this->monitorAllSessions();
        }
    }

    private function monitorSpecificSession(string $sessionId)
    {
        $this->info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–º–ø–æ—Ä—Ç–∞: {$sessionId}");
        $this->newLine();

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        $stats = ImportQueue::bySession($sessionId)
            ->select('status', DB::raw('COUNT(*) as count'))
            ->groupBy('status')
            ->get()
            ->pluck('count', 'status')
            ->toArray();

        $pending = $stats['pending'] ?? 0;
        $processing = $stats['processing'] ?? 0;
        $completed = $stats['completed'] ?? 0;
        $failed = $stats['failed'] ?? 0;
        $total = $pending + $processing + $completed + $failed;

        $this->table(
            ['–°—Ç–∞—Ç—É—Å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '%'],
            [
                ['–û–∂–∏–¥–∞—é—Ç (pending)', $pending, $total > 0 ? round($pending / $total * 100, 1) . '%' : '0%'],
                ['–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è (processing)', $processing, $total > 0 ? round($processing / $total * 100, 1) . '%' : '0%'],
                ['–ó–∞–≤–µ—Ä—à–µ–Ω—ã (completed)', $completed, $total > 0 ? round($completed / $total * 100, 1) . '%' : '0%'],
                ['–û—à–∏–±–∫–∏ (failed)', $failed, $total > 0 ? round($failed / $total * 100, 1) . '%' : '0%'],
                ['–í–°–ï–ì–û', $total, '100%'],
            ]
        );

        if ($failed > 0) {
            $this->newLine();
            $this->warn("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {$failed} –∑–∞–ø–∏—Å–µ–π —Å –æ—à–∏–±–∫–∞–º–∏!");
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
            $errors = ImportQueue::bySession($sessionId)
                ->where('status', 'failed')
                ->select('id', 'error_message', 'attempts')
                ->limit(5)
                ->get();

            if ($errors->isNotEmpty()) {
                $this->line("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:");
                foreach ($errors as $error) {
                    $this->line("  ID {$error->id}: {$error->error_message} (–ø–æ–ø—ã—Ç–æ–∫: {$error->attempts})");
                }
            }
        }

        if ($pending === 0 && $processing === 0) {
            $this->newLine();
            $this->info("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!");
        } else {
            $this->newLine();
            $this->warn("üîÑ –ò–º–ø–æ—Ä—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... (–æ—Å—Ç–∞–ª–æ—Å—å: " . ($pending + $processing) . ")");
        }
    }

    private function monitorAllSessions()
    {
        $this->info("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∏–º–ø–æ—Ä—Ç–∞");
        $this->newLine();

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        $stats = ImportQueue::select('status', DB::raw('COUNT(*) as count'))
            ->groupBy('status')
            ->get()
            ->pluck('count', 'status')
            ->toArray();

        $pending = $stats['pending'] ?? 0;
        $processing = $stats['processing'] ?? 0;
        $completed = $stats['completed'] ?? 0;
        $failed = $stats['failed'] ?? 0;
        $total = $pending + $processing + $completed + $failed;

        $this->table(
            ['–°—Ç–∞—Ç—É—Å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'],
            [
                ['–û–∂–∏–¥–∞—é—Ç (pending)', $pending],
                ['–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è (processing)', $processing],
                ['–ó–∞–≤–µ—Ä—à–µ–Ω—ã (completed)', $completed],
                ['–û—à–∏–±–∫–∏ (failed)', $failed],
                ['–í–°–ï–ì–û', $total],
            ]
        );

        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        $recentSessions = ImportQueue::select('session_id', DB::raw('COUNT(*) as total'), DB::raw('MAX(created_at) as last_activity'))
            ->groupBy('session_id')
            ->orderBy('last_activity', 'desc')
            ->limit(5)
            ->get();

        if ($recentSessions->isNotEmpty()) {
            $this->newLine();
            $this->line("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–º–ø–æ—Ä—Ç–∞:");
            
            foreach ($recentSessions as $session) {
                $this->line("  {$session->session_id} - {$session->total} –∑–∞–ø–∏—Å–µ–π - {$session->last_activity}");
            }
        }

        if ($pending > 0 || $processing > 0) {
            $this->newLine();
            $this->warn("üîÑ –í –æ—á–µ—Ä–µ–¥–∏: {$pending}, –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {$processing}");
        } else {
            $this->newLine();
            $this->info("‚úÖ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞");
        }
    }
}

