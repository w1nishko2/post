<?php

namespace App\Http\Controllers;

use App\Models\Order;
use App\Models\TelegramBot;
use App\Services\TelegramBotService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class TelegramWebhookController extends Controller
{
    protected $telegramService;

    public function __construct(TelegramBotService $telegramService)
    {
        $this->telegramService = $telegramService;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
     */
    public function handle(Request $request, TelegramBot $bot)
    {
        $update = $request->all();
        
        Log::info('Telegram webhook received', [
            'bot_id' => $bot->id,
            'update' => $update
        ]);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
        if (isset($update['callback_query'])) {
            return $this->handleCallbackQuery($update['callback_query'], $bot);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (isset($update['message'])) {
            return $this->handleMessage($update['message'], $bot);
        }

        return response()->json(['ok' => true]);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (callback query)
     */
    private function handleCallbackQuery(array $callbackQuery, TelegramBot $bot)
    {
        $callbackData = $callbackQuery['data'] ?? '';
        $callbackQueryId = $callbackQuery['id'] ?? '';
        $chatId = $callbackQuery['from']['id'] ?? null;
        $messageId = $callbackQuery['message']['message_id'] ?? null;

        Log::info('Processing callback query', [
            'callback_data' => $callbackData,
            'chat_id' => $chatId,
            'bot_id' => $bot->id
        ]);

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
        if (str_starts_with($callbackData, 'confirm_payment_')) {
            $orderId = (int) str_replace('confirm_payment_', '', $callbackData);
            return $this->confirmPayment($orderId, $bot, $chatId, $messageId, $callbackQueryId);
        }

        // –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
        if (str_starts_with($callbackData, 'cancel_order_')) {
            $orderId = (int) str_replace('cancel_order_', '', $callbackData);
            return $this->cancelOrder($orderId, $bot, $chatId, $messageId, $callbackQueryId);
        }

        return response()->json(['ok' => true]);
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞
     */
    private function confirmPayment(int $orderId, TelegramBot $bot, int $chatId, int $messageId, string $callbackQueryId)
    {
        $order = Order::find($orderId);

        if (!$order) {
            $this->answerCallbackQuery($bot, $callbackQueryId, '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
            return response()->json(['ok' => true]);
        }

        if ($order->status !== Order::STATUS_PENDING) {
            $this->answerCallbackQuery($bot, $callbackQueryId, '–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', true);
            return response()->json(['ok' => true]);
        }

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
            // –û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å
            $success = $order->confirmPayment();

            if (!$success) {
                $this->answerCallbackQuery($bot, $callbackQueryId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã', true);
                return response()->json(['ok' => true]);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            $this->editMessage($bot, $chatId, $messageId, 
                "‚úÖ <b>–û–ü–õ–ê–¢–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!</b>\n\n" .
                "üìã –ó–∞–∫–∞–∑ #{$order->order_number} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω\n" .
                "üí∞ –°—É–º–º–∞: {$order->formatted_total}\n\n" .
                "üéâ –¢–æ–≤–∞—Ä—ã —Å–ø–∏—Å–∞–Ω—ã —Å–æ —Å–∫–ª–∞–¥–∞\n" .
                "‚è∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: " . now()->format('d.m.Y –≤ H:i')
            );

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            if ($order->telegram_chat_id) {
                $this->telegramService->sendMessage($bot, $order->telegram_chat_id,
                    "üéâ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n" .
                    "–í–∞—à –∑–∞–∫–∞–∑ #{$order->order_number} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω.\n" .
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üôè"
                );
            }

            $this->answerCallbackQuery($bot, $callbackQueryId, '–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!');

            Log::info('Payment confirmed successfully', [
                'order_id' => $orderId,
                'order_number' => $order->order_number,
                'bot_id' => $bot->id
            ]);

        } catch (\Exception $e) {
            Log::error('Failed to confirm payment', [
                'order_id' => $orderId,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            $this->answerCallbackQuery($bot, $callbackQueryId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã', true);
        }

        return response()->json(['ok' => true]);
    }

    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
     */
    private function cancelOrder(int $orderId, TelegramBot $bot, int $chatId, int $messageId, string $callbackQueryId)
    {
        $order = Order::find($orderId);

        if (!$order) {
            $this->answerCallbackQuery($bot, $callbackQueryId, '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
            return response()->json(['ok' => true]);
        }

        if (!$order->canBeCancelled()) {
            $this->answerCallbackQuery($bot, $callbackQueryId, '–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å', true);
            return response()->json(['ok' => true]);
        }

        try {
            // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑ –∏ —Å–Ω–∏–º–∞–µ–º —Ä–µ–∑–µ—Ä–≤
            $order->cancelAndUnreserve();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            $this->editMessage($bot, $chatId, $messageId, 
                "‚ùå <b>–ó–ê–ö–ê–ó –û–¢–ú–ï–ù–ï–ù</b>\n\n" .
                "üìã –ó–∞–∫–∞–∑ #{$order->order_number} –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n" .
                "üí∞ –°—É–º–º–∞: {$order->formatted_total}\n\n" .
                "üîÑ –¢–æ–≤–∞—Ä—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥"
            );

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–º–µ–Ω–µ
            if ($order->telegram_chat_id) {
                $this->telegramService->sendMessage($bot, $order->telegram_chat_id,
                    "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n" .
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ #{$order->order_number} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n" .
                    "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                );
            }

            $this->answerCallbackQuery($bot, $callbackQueryId, '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω');

            Log::info('Order cancelled successfully', [
                'order_id' => $orderId,
                'bot_id' => $bot->id
            ]);

        } catch (\Exception $e) {
            Log::error('Failed to cancel order', [
                'order_id' => $orderId,
                'error' => $e->getMessage()
            ]);

            $this->answerCallbackQuery($bot, $callbackQueryId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞', true);
        }

        return response()->json(['ok' => true]);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private function handleMessage(array $message, TelegramBot $bot)
    {
        $text = $message['text'] ?? '';
        $chatId = $message['from']['id'] ?? null;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if ($text === '/start') {
            $this->telegramService->sendMessage($bot, $chatId,
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {$bot->bot_name}!\n\n" .
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º."
            );
        }

        return response()->json(['ok' => true]);
    }

    /**
     * –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query
     */
    private function answerCallbackQuery(TelegramBot $bot, string $callbackQueryId, string $text, bool $showAlert = false)
    {
        $this->telegramService->answerCallbackQuery($bot, $callbackQueryId, $text, $showAlert);
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private function editMessage(TelegramBot $bot, int $chatId, int $messageId, string $text)
    {
        // –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        $this->telegramService->editMessageText($bot, $chatId, $messageId, $text);
        // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        $this->telegramService->editMessageReplyMarkup($bot, $chatId, $messageId);
    }
}
