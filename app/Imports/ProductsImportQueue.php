<?php

namespace App\Imports;

use App\Models\ImportQueue;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Maatwebsite\Excel\Concerns\WithChunkReading;

/**
 * –ë–´–°–¢–†–´–ô –ò–ú–ü–û–†–¢ –í –¢–ê–ë–õ–ò–¶–£ –û–ß–ï–†–ï–î–ò
 * 
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
 * 1. –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª —á–∞–Ω–∫–∞–º–∏ –ø–æ 500 —Å—Ç—Ä–æ–∫
 * 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É import_queue (–ë–ï–ó –æ–±—Ä–∞–±–æ—Ç–∫–∏)
 * 3. –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (1-3 —Å–µ–∫—É–Ω–¥—ã)
 * 4. CRON –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –≤ —Ñ–æ–Ω–µ
 */
class ProductsImportQueue implements ToCollection, WithHeadingRow, WithChunkReading
{
    protected $userId;
    protected $botId;
    protected $updateExisting;
    protected $downloadImages;
    protected $importSessionId;
    
    protected static $totalImported = 0;

    public function __construct($userId, $botId, $updateExisting = false, $downloadImages = true)
    {
        $this->userId = $userId;
        $this->botId = $botId;
        $this->updateExisting = $updateExisting;
        $this->downloadImages = $downloadImages;
        $this->importSessionId = (string) Str::uuid();
        
        // –£–ë–ò–†–ê–ï–ú –í–°–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø
        @set_time_limit(0);
        @ini_set('max_execution_time', '0');
        @ini_set('memory_limit', '-1');
        @ini_set('display_errors', '0');
        
        Log::info("üöÄ –ù–∞—á–∞–ª–æ –ë–´–°–¢–†–û–ì–û –∏–º–ø–æ—Ä—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å", [
            'session' => $this->importSessionId,
            'user_id' => $userId,
            'bot_id' => $botId
        ]);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å—Ç—Ä–æ–∫
     * –ü—Ä–æ—Å—Ç–æ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ –ë–î –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    public function collection(Collection $rows)
    {
        $chunkNumber = ceil(self::$totalImported / $this->chunkSize());
        
        Log::info("üì¶ –ò–º–ø–æ—Ä—Ç —á–∞–Ω–∫–∞ #{$chunkNumber}", [
            'session' => $this->importSessionId,
            'rows' => $rows->count()
        ]);

        $dataToInsert = [];

        foreach ($rows as $index => $row) {
            try {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if ($this->isEmptyRow($row)) {
                    continue;
                }

                // –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è bulk insert
                $dataToInsert[] = [
                    'session_id' => $this->importSessionId,
                    'user_id' => $this->userId,
                    'telegram_bot_id' => $this->botId,
                    'row_data' => json_encode($row->toArray()),
                    'update_existing' => $this->updateExisting,
                    'download_images' => $this->downloadImages,
                    'status' => 'pending',
                    'attempts' => 0,
                    'max_attempts' => 3,
                    'created_at' => now(),
                    'updated_at' => now(),
                ];

                self::$totalImported++;

            } catch (\Throwable $e) {
                Log::error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å", [
                    'session' => $this->importSessionId,
                    'row' => $index,
                    'error' => $e->getMessage()
                ]);
            }
        }

        // Bulk insert - –û–ß–ï–ù–¨ –ë–´–°–¢–†–û!
        if (!empty($dataToInsert)) {
            ImportQueue::insert($dataToInsert);
            
            Log::info("‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: " . count($dataToInsert), [
                'session' => $this->importSessionId,
                'total' => self::$totalImported
            ]);
        }

        // –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞
        unset($rows, $dataToInsert);
        if (function_exists('gc_collect_cycles')) {
            gc_collect_cycles();
        }
    }

    /**
     * –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ (—á–∏—Ç–∞–µ–º –ø–æ 500 —Å—Ç—Ä–æ–∫ - –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Ç.–∫. —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î)
     */
    public function chunkSize(): int
    {
        return 500;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
     */
    private function isEmptyRow($row): bool
    {
        $values = array_filter($row->toArray(), function($value) {
            return !empty(trim($value));
        });
        
        return empty($values);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å ID —Å–µ—Å—Å–∏–∏ –∏–º–ø–æ—Ä—Ç–∞
     */
    public function getImportSessionId(): string
    {
        return $this->importSessionId;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    public static function getTotalImported(): int
    {
        return self::$totalImported;
    }

    /**
     * –°–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫
     */
    public static function resetCounter(): void
    {
        self::$totalImported = 0;
    }
}
