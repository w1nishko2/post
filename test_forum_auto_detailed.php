<?php

require_once 'vendor/autoload.php';

echo "=== –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Forum-Auto ===\n\n";

// –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
$login = '615286_pynzaru_andrey';
$password = 'ji45fDI9nCbj';

// –°–ø–∏—Å–æ–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
$endpoints = [
    'clientinfo' => [],
    'listbrands' => ['art' => 'test'],
    'listgoods' => ['art' => 'test', 'cross' => 1]
];

$baseUrl = 'https://api.forum-auto.ru/';

foreach ($endpoints as $endpoint => $extraParams) {
    echo "--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: $endpoint ---\n";
    
    $params = array_merge([
        'login' => $login,
        'pass' => $password
    ], $extraParams);
    
    echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: " . json_encode($params, JSON_UNESCAPED_UNICODE) . "\n";
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å
    echo "\n>> GET –∑–∞–ø—Ä–æ—Å:\n";
    testRequest($baseUrl . $endpoint, $params, 'GET');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å (form-data)
    echo "\n>> POST –∑–∞–ø—Ä–æ—Å (form-data):\n";
    testRequest($baseUrl . $endpoint, $params, 'POST_FORM');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å (JSON)
    echo "\n>> POST –∑–∞–ø—Ä–æ—Å (JSON):\n";
    testRequest($baseUrl . $endpoint, $params, 'POST_JSON');
    
    echo "\n" . str_repeat("=", 80) . "\n\n";
}

function testRequest($url, $params, $method) {
    $ch = curl_init();
    
    // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    curl_setopt_array($ch, [
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_TIMEOUT => 30,
        CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_SSL_VERIFYHOST => false,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_MAXREDIRS => 3,
        CURLOPT_USERAGENT => 'Forum-Auto-Test-Client/1.0',
        CURLOPT_VERBOSE => false
    ]);
    
    switch ($method) {
        case 'GET':
            $fullUrl = $url . '?' . http_build_query($params);
            curl_setopt($ch, CURLOPT_URL, $fullUrl);
            echo "URL: $fullUrl\n";
            break;
            
        case 'POST_FORM':
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));
            curl_setopt($ch, CURLOPT_HTTPHEADER, [
                'Content-Type: application/x-www-form-urlencoded'
            ]);
            echo "URL: $url\n";
            echo "POST –¥–∞–Ω–Ω—ã–µ: " . http_build_query($params) . "\n";
            break;
            
        case 'POST_JSON':
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));
            curl_setopt($ch, CURLOPT_HTTPHEADER, [
                'Content-Type: application/json',
                'Accept: application/json'
            ]);
            echo "URL: $url\n";
            echo "JSON –¥–∞–Ω–Ω—ã–µ: " . json_encode($params, JSON_UNESCAPED_UNICODE) . "\n";
            break;
    }
    
    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $contentType = curl_getinfo($ch, CURLINFO_CONTENT_TYPE);
    $totalTime = curl_getinfo($ch, CURLINFO_TOTAL_TIME);
    $error = curl_error($ch);
    
    curl_close($ch);
    
    echo "HTTP –∫–æ–¥: $httpCode\n";
    echo "Content-Type: $contentType\n";
    echo "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {$totalTime}s\n";
    
    if ($error) {
        echo "–û—à–∏–±–∫–∞ cURL: $error\n";
        return;
    }
    
    echo "–†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: " . strlen($response) . " –±–∞–π—Ç\n";
    
    if (empty($response)) {
        echo "‚ö†Ô∏è  –ü–£–°–¢–û–ô –û–¢–í–ï–¢!\n";
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞
    $preview = strlen($response) > 500 ? substr($response, 0, 500) . '...' : $response;
    echo "–û—Ç–≤–µ—Ç: $preview\n";
    
    // –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ JSON
    $json = json_decode($response, true);
    if ($json !== null) {
        echo "‚úÖ –í–∞–ª–∏–¥–Ω—ã–π JSON\n";
        echo "–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: " . json_encode($json, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT) . "\n";
    } else {
        echo "‚ùå –ù–µ JSON –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON\n";
        echo "JSON –æ—à–∏–±–∫–∞: " . json_last_error_msg() . "\n";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ HTML –ª–∏ —ç—Ç–æ
        if (strpos($response, '<html') !== false || strpos($response, '<!DOCTYPE') !== false) {
            echo "üìÑ –ü–æ—Ö–æ–∂–µ –Ω–∞ HTML –æ—Ç–≤–µ—Ç\n";
        }
    }
}